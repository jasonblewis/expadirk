#!/usr/bin/perl

# Expadirk v0.3 Copyright 2012 Jason Lewis

# This file is part of Expadirk.

# Expadirk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Expadirk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Expadirk.  If not, see <http://www.gnu.org/licenses/>.

# Expadirk-
# Program to email PDFs.
# Scans through a provided PDF and searches for paramater pages. It then uses those paramaters
# to compose an email to the recipient and email the relevant pages

# to test this program call from command line:  ./expadirk.pl testpdf.pdf

use warnings;
use strict;
use autodie qw(:all);
use Config::Auto;
use CAM::PDF;
use Data::Dumper;
use PDF::API2;
use MIME::Lite;
use POSIX;
use Log::Dispatch::File;
use Net::CUPS::Destination;
use IPC::Open2;
use File::Which;
use File::Spec;

my $config;
$config = Config::Auto::parse();

my $debug = $config->{debug};
my $logfile = $config->{logfile};

# redirect stdout and stderr to our log file because cups-pdf doesn't seem to save output
open my $oldout, ">&STDOUT"     or die "Can't dup STDOUT: $!";
open my $olderr, ">&", \*STDERR or die "Can't dup STDERR: $!";

if ($config->{OverwriteLogFile}) {
  open STDOUT, '>', $logfile or die "Can't redirect STDOUT: $!"; # overwrite log file
} else {
  open STDOUT, '>>', $logfile or die "Can't redirect STDOUT: $!"; # append
                                                                  # to
                                                                  # log file
}
open STDERR, ">&STDOUT"     or die "Can't dup STDOUT: $!";


select STDERR; $| = 1;      # make unbuffered
select STDOUT; $| = 1;      # make unbuffered
print STDOUT "stdout redirected to log file\n" if ($debug <= 2); # this works for
print STDERR "stderr redirected to log file\n" if ($debug <= 2);  # subprocesses too


# level verbose explanation
#     0 emerg system is unusable
#     1 alert action must be taken immediately
#     2 crit the system is in a critical condition
#     3 err there is an error condition
#     4 warning there is a warning condition
#     5 notice a normal but significant condition
#     6 info a purely informational message
#     7 debug messages generated to debug the application


my $sendemail = $config->{sendmail};;
my $testemailaddress = $config->{testemailaddress};
my $bcc = $config->{bcc};
my $bccaddress = $config->{bccaddress};
my $dispatcher = Log::Dispatch->new;
$dispatcher->add( Log::Dispatch::File->new( 
		      name => 'somename',
		      min_level => $debug,
		      filename => $logfile,
                      mode      => 'append') );
# wrapper arround dispatcher to log to a file
sub logit {
    (my $level, my $message) = @_;
    $dispatcher->log(level=> $level, message => $$.' '.strftime('%Y-%m-%d %H:%M:%S', localtime())." ".$message."\n");
};

logit('info','expadirk started-------------------------------------------------------------------------------------------------');
my $localarg;
my $pdfname;

if (@ARGV) {
    foreach my $argnum (0 .. $#ARGV) { 
	print "Argument $argnum: $ARGV[$argnum]\n";
    $pdfname = $ARGV[0];
    }
#    logit('info',"Command Line argumets: ".$0."|$localarg");
    
} else {
    logit('info',"ERROR: no name for pdf file, bye.");
    exit;
}
# check to see if file exists and is readable
if ( -r $pdfname ) {
    logit('debug', "File $pdfname exists and is readable");
} else {
    logit('error', "File $pdfname does not exist or is not readable");
}     


my $pdf = CAM::PDF->new($pdfname) || do {
    logit('critical',"$CAM::PDF::errstr");
    die "$CAM::PDF::errstr";
};


my $sectionFP = 1;
my $sectionLP;
my $content;
my $pdf2txt = 'pdf2txt.py';
my $pdf2txt_exe;
my $PDFDirectoryName = $config->{PDFDirectoryName};
my $defaultfromaddress = $config->{defaultfromaddress};
my $printername = $config->{printername};
my $printermedia = $config->{printermedia};
my $printenable = $config->{printenable};
logit('debug',"printenable: $printenable");
my $bccmyself = $config->{bccmyself};
my $usepdfminer = $config->{usepdfminer};

# if we are using pdfminer, test if its available
if ($usepdfminer) {
    $pdf2txt_exe = which($pdf2txt);
        unless ( -X $pdf2txt_exe ) {
            die "$pdf2txt not found or not executeable";
        }
}


my @section;


# step through each page and see if we have a parameter page

# First, work out where each section is. Put list of sections into some kind of array

my $chldout;
my $chldin;
my $pid; # = open2($chldout,$chldin,$pdf2txt_exe, '-t', 'text', '-p', '2',$pdfname);


foreach my $p (1 .. $pdf->numPages())   {
    logit('debug',"before system call page: $p\n");
    if ($usepdfminer) {
        logit('info',"using $pdf2txt_exe");
        $pid = open2($chldout,$chldin,$pdf2txt_exe, '-t', 'text', '-p', $p,$pdfname);
        $content = do { 
            local $/;
            <$chldout>;
        }; 
    } else {
        logit('info','using CAM::PDF');
        $content = $pdf->getPageText($p);
    }


    my $len=length($content);
    logit('debug',"after system call print: content pdfname: $pdfname len:$len");
    
    logit('debug',"PAGE: $p $content");
  my $found = 0;
  if ($content =~ m/#_ (\w+) (.+?)_#/) {  # see if we have a parameter
                                # page, if we do then search it for
                                # parameters
      logit('debug',"found a paramater page");

    my %variables;
    while ($content =~ s/#_ (\w+) (.+?) _#(.*)/$3/s) {
        $variables{$1} = $2;
        logit('info',"Page: $p :$1 -> ###$2###");
        $found = 1;
    }
      $sectionLP = $p;
      logit('debug',"range: $sectionFP - $sectionLP");
      $variables{'SectionFP'} = $sectionFP;
      $variables{'SectionLP'} = $sectionLP;
      push(@section, {%variables});
      $sectionFP = $p+1;
  }
}


# now make the pdf's and email them:
my $var;
foreach $var (@section) { 
    logit('debug',Dumper($var));
    logit('debug',"startpage = ".$var->{'SectionFP'}." endpage = ".$var->{'SectionLP'});

    my $attachmentname = $var->{'emailAttachmentName'}; 
    my $attachmentfilename = $$.$attachmentname; # append process id to ensure uniqueness of file names
    # check to see if it ends in pdf and if not, add PDF to it
    if ($attachmentfilename !~ /\.pdf\z/i) {
	$attachmentfilename = $attachmentfilename . ".PDF" }
    my $sendmail = "/usr/sbin/sendmail -t"; 
    my $reply_to = 'From: ar@defaultemailaddress.com.au';
    my $subject = $var->{'emailSubject'};
    my $mycontent = $var->{'emailBody'};
    my $to = $var->{'email'};
    my $from = 'ar@defaultemailaddress';
    my $printfile = 0; # false by default
    # test if body contains a from email address and use that if its there
    if ( $mycontent =~ s/<.?f.?r.?o.?m.?>(.*)<.?\/.?f.?r.?o.?m.?>//s ) {
	logit('debug','Found from email address.');
	$from = "$1";
	$from =~ s/\s+//g;
	$reply_to = $from;
	$bcc = $from if ($bccmyself); # bcc myself to from address
	logit('debug',"from: $from");
	logit('debug',"bcc: $bcc");
    } else {
	print "\nin else statement debug=$debug\n";
	logit('debug','Failed to find a from email address.');
    }
    
    # test for <print> directive and print if found
    if ( $mycontent =~ s/<.?p.?r.?i.?n.?t.?>\n?//s ) {
	$printfile=1; # found print command, we should print this file
    }

    # prFile($attachmentfilename);
    # prDoc( { file  => $pdfname,  # name of long pdf to get pages from
    #          first => $var->{'SectionFP'},
    #          last  => $var->{'SectionLP'}-1});
    # prEnd(); #file has now been save to disk

    my $pdfoutfilepath = File::Spec->catfile($PDFDirectoryName, $attachmentfilename);

    logit('debug', "Path: ".$PDFDirectoryName."$attachmentfilename");



    my $input = PDF::API2->open( $pdfname);
    logit('debug',"reading pdf: $pdfname");
    my $pdfout = PDF::API2->new( -file => $attachmentfilename );
    logit('debug',"creating pdf: $attachmentfilename");
    my $root = $pdfout->outlines;
    my $outline = $root->outline;
       $outline->title('test-title');
    my $import_page = 0;

    my $document_page = 0;
    foreach ($var->{'SectionFP'}.. $var->{'SectionLP'}-1 ) {

      ++$import_page;
      ++$document_page;

      my $page = $pdfout->importpage($input, $_, $import_page);
      my $bookmark = $outline->outline;
      #$bookmark->title("Page $document_page");
      #$bookmark->dest($page);
      $outline->dest($page) if $document_page == 1;
    }
    $pdfout->preferences( -outlines => 1 );
    $pdfout->update;
    $pdfout->end;

    #log the results ";
    logit('debug', "sendmail -> $sendmail");
    logit('debug', "reply_to -> $reply_to");
    logit('debug', "subject -> $subject");
    logit('debug', "content -> $mycontent");
    logit('debug', "to -> $to") ;
    logit('debug', "attachmentname -> $attachmentname") ;
    logit('debug', "attachmentfilename -> $attachmentfilename") ;
    if ( -r $pdfoutfilepath ) {
	logit('debug', "File $pdfoutfilepath exists and is readable") ;
    } else {
	logit('err', "File $pdfoutfilepath does not exist or is not readable") ;
    }    

    my $msg = MIME::Lite->new(
	From    => "$from",
	Subject => "$subject",
	Type    => 'multipart/mixed',
	);

    if ($testemailaddress) {
	logit('info',"Line: " . __LINE__. " Sending email to \$testemailaddress: $testemailaddress instead of $to");
	$msg->add(To => "$testemailaddress");
        $to = $testemailaddress;
    } else {
	logit('debug', __LINE__ . "Sending email to $to");
	$msg->add(To => "$to");
    }

    if ($bccaddress) {
        logit('info',"overriding bcc address $bcc with config supplied bcc adress $bccaddress");
        $bcc = $bccaddress;
    }

    if ($bcc) {
	logit('info', "adding Bcc: $bcc to email");
	$msg->add(Bcc => "$bcc");
    }


    $msg->attach(
	Type     => 'TEXT',
	Data     => $mycontent,
	);

    $msg->attach(
	Type     => 'application/pdf',
	Path     => $pdfoutfilepath,
	Filename => "$attachmentfilename",
	);

    logit('info', "sending $attachmentname to: $to");
    if ($sendemail) {
	logit('info', "\$sendemail set: really sending $attachmentfilename as $attachmentfilename to: $to");
	$msg->send || logit('critical',"Critical Error: Was unable to send email:\nTo: $to\nSubject: $subject\nAttachment: $attachmentfilename");
	#if ($msg->last_send_successful()) {
	#}

    } else {
	logit('debug', "\$sendemail not set: not sending email");
    }

    # print the file if $printfile is set
    if ($printfile) {
	logit('debug',"printing the file: $pdfoutfilepath");
	my $cups = Net::CUPS->new();
	my $printer = $cups->getDestination( $printername );
	my $name = $printer->getName();
	my @options = $printer->getOptions();
	$printer->addOption('Media',$printermedia);
	if ($printenable) {
            my $jobid = $printer->printFile( $pdfoutfilepath, $attachmentfilename );
            logit('debug',"printing $jobid $pdfoutfilepath $attachmentfilename");
        }
    }

    # no need for the temp file any more - delete it
    logit('debug', "deleting $pdfoutfilepath");
    if (unlink($pdfoutfilepath) != 1) {
	logit('warn', "unable to delete $pdfoutfilepath or $pdfoutfilepath not found");
    }
} # end for each

# reset strout and stderr before exiting
open STDOUT, ">&", $oldout or die "Can't dup \$oldout: $!";
open STDERR, ">&", $olderr or die "Can't dup OLDERR: $!";

logit('info','expadirk ended');

# Local Variables:
# compile-command: "perl -w ./expadirk ./testpdf.pdf"
# End:
